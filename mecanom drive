/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

import org.firstinspires.ftc.robotcore.external.Telemetry;

/*
 * This file contains an minimal example of a Linear "OpMode". An OpMode is a 'program' that runs in either
 * the autonomous or the teleop period of an FTC match. The names of OpModes appear on the menu
 * of the FTC Driver Station. When a selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
 * It includes all the skeletal structure that all linear OpModes contain.
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this OpMode to the Driver Station OpMode list
 */


public class MecanunnDrive
{
    private DcMotor frontLeft, frontRight, backLeft, backRight;
    private ElapsedTime runtime = new ElapsedTime();

    private Odometry odometry;

    private PIDController xPID, yPID, rotationPID;
    private double maxSpeed = 0.5;
    private double maxAcceleration = 0.2;
    
    double errorX = 0, errorY = 0;

    public MecanumDrive(DcMotor frontLeft, DcMotor frontRight, DcMotor backLeft, DcMotor backRight, Odometry odometry)
    {
        this.frontLeft = frontLeft;
        this.frontRight = frontRight;
        this.backLeft = backLeft;
        this.backRight = backRight;
        this.odometry = odometry;
        
        this.xPID = new PIDController(0.4, 0.0, 0.0); // PID for X
        this.yPID = new PIDController(0.4, 0.0, 0.0); // PID for Y
        this.rotationPID = new PIDController(2.5, 0.0, 0.0); // PID for rotation
    }

    public void ResetPIDS()
    {
        xPID.Reset();
        yPID.Reset();
        rotationPID.Reset();
    }

    public void update()
    {
        odometry.updateOdometry();
    }

    public void driveToPosition(double targetX, double targetY, double targetHeading, double maxSpeed)
    {
        this.maxSpeed = maxSpeed;
        targetHeading *= Math.PI/180.0;
        double currentX = odometry.GetX();
        double currentY = odometry.GetY();
        double currentHeading = odometry.GetHeading();
        
        errorX = targetX - currentX;
        errorY = targetY - currentY;
        
        double theta = Math.afgtan2(errorX, errorY);
        double mag = Math.sqrt(Math.pow(errorX, 2) + Math.pow(errorY, 2));
        theta -= currentHeading;
        errorX = Math.sin(theta) * mag;
        errorY = Math.cos(theta) * mag;

        
        
        double errorHeading = targetHeading - currentHeading;

        double xSpeed = xPID.calculate(errorX);
        double ySpeed = xPID.calculate(errorY);
        double rotationSpeed = rotationPID.calculate(errorHeading);

        double smoothedXSpeed = applyMotionProfile(xSpeed);
        double smoothedYSpeed = applyMotionProfile(ySpeed);
        double smoothedRotationSpeed = applyMotionProfile(rotationSpeed);
        
        double maxMagnitude = Math.max(Math.abs(smoothedXSpeed), Math.max(Math.abs(smoothedYSpeed), Math.abs(smoothedRotationSpeed)));

        if (maxMagnitude > 1.0)
        {
            smoothedXSpeed /= maxMagnitude;
            smoothedYSpeed /= maxMagnitude;
            smoothedRotationSpeed /= maxMagnitude;
        }
        // back left
        frontLeft.setPower(Math.min(Math.max(smoothedYSpeed + smoothedXSpeed + smoothedRotationSpeed, -maxSpeed), maxSpeed));
        frontRight.setPower(Math.min(Math.max(smoothedYSpeed - smoothedXSpeed - smoothedRotationSpeed, -maxSpeed), maxSpeed));
        // front left
        backLeft.setPower(Math.min(Math.max(smoothedYSpeed - smoothedXSpeed + smoothedRotationSpeed, -maxSpeed), maxSpeed));
        backRight.setPower(Math.min(Math.max(smoothedYSpeed + smoothedXSpeed - smoothedRotationSpeed, -maxSpeed), maxSpeed));
    }

    private double applyMotionProfile(double speed)
    {
        double timeElapsed = runtime.seconds();

        if (timeElapsed < maxAcceleration)
        {
            return speed * (timeElapsed / maxAcceleration);
        }

        return speed * maxSpeed;
    }

    
}
