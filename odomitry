/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;


public class Odometry 
{
    final double TICKS_PER_REV = 8192;
    final double WHEEL_DIAMETER = 2.0;
    final double DISTANCE_PER_TICK = Math.PI * WHEEL_DIAMETER / TICKS_PER_REV;
    final double TRACK_WIDTH = 14;
    final double FORWARD_OFFSET = 6.5;

    double n1 = 0, n2 = 0, n3 = 0, lastN1 = 0, lastN2 = 0, lastN3 = 0;

    private DcMotor odometryYLeft, odometryYRight, odometryXBack;

    private double x = 0, y = 0, heading = 0;

    public Odometry(DcMotor odometryYRight, DcMotor odometryYLeft, DcMotor odometryXBack)
    {
        this.odometryYLeft = odometryYLeft;
        this.odometryYRight = odometryYRight;
        this.odometryXBack = odometryXBack;
        n1 = odometryYRight.getCurrentPosition();
        n2 = odometryYLeft.getCurrentPosition();
        n3 = odometryXBack.getCurrentPosition();
        lastN1 = odometryYRight.getCurrentPosition();
        lastN2 = odometryYLeft.getCurrentPosition();
        lastN3 = odometryXBack.getCurrentPosition();
    }

    public void updateOdometry()
    {
        n1 = odometryYRight.getCurrentPosition();
        n2 = odometryYLeft.getCurrentPosition();
        n3 = odometryXBack.getCurrentPosition();
        double deltaN1 = n1 - lastN1; // delta right encoder
        double deltaN2 = -(n2 - lastN2); // delta left encoder
        double deltaN3 = n3 - lastN3; // delta back encoder

        double deltaY = DISTANCE_PER_TICK * (deltaN1 + deltaN2)/2;
        double deltaAngle = DISTANCE_PER_TICK * (deltaN2 - deltaN1)/TRACK_WIDTH;
        double deltaX = DISTANCE_PER_TICK * (deltaN3 - FORWARD_OFFSET*(deltaN2 - deltaN1) / TRACK_WIDTH);

        
        x -= ((Math.cos(heading) * deltaX - Math.sin(heading) * deltaY)+(Math.cos(heading+deltaAngle) * deltaX - Math.sin(heading+deltaAngle) * deltaY))/2.0;
        y += ((Math.cos(heading) * deltaY + Math.sin(heading) * deltaX)+(Math.cos(heading+deltaAngle) * deltaY + Math.sin(heading+deltaAngle) * deltaX))/2.0;
        heading += deltaAngle;

        lastN1 = n1;
        lastN2 = n2;
        lastN3 = n3;
    }

    public void Print()
    {

    }

    public double GetX()
    {
        return x;
    }

    public double GetY()
    {
        return y;
    }

    public double GetHeading()
    {
        return heading;
    }
}
